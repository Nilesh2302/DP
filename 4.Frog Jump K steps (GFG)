#t.c. is O(n*k) and s.c is O(n)  note in this case we cannot optimize the space cpomlexity to O(1) bz of K
import sys
class Solution:
    def solve_util(self,n,height,dp,k):
        dp[0] = 0 
        for i in range(1,n):
            mmsteps = sys.maxsize
            for j in range(1,k+1):
                if i-j>=0:
                    jump = dp[i-j] + abs(height[i]-height[i-j])
                    mmsteps = min(jump,mmsteps)
            dp[i] = mmsteps
        
        return dp[n-1]
        
    def minimizeCost(self, height, n, k):
        dp = [-sys.maxsize]*n
        return self.solve_util(n,height,dp,k)
