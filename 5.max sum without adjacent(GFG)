approch 1 : using simple recursion t.c. O(n) and s.c is O(n+n)
class Solution:
	def findMaxSum(self,arr, n):
		def f(arr,n):
		    if n == 0:
		        return arr[n]
		    
		    if n<0:
		        return 0
		    
		    pick = arr[n] + f(arr,n-2)
		    notpick = 0 + f(arr,n-1)
		    return max(pick,notpick)
		return f(arr,n-1)    
		
    
    
approch 2 : using dp t.c. O(n) and s.c. is(n)     
class Solution:
	
	def findMaxSum(self,arr, n):
	    
		def f(arr,n,dp):
		    if dp[n]!=-1:
		        return dp[n]
		        
		    if n == 0:
		        return arr[n]
		    
		    if n<0:
		        return 0
		    
		    
		    
		    pick = arr[n] + f(arr,n-2,dp)
		    notpick = 0 + f(arr,n-1,dp)
		    dp[n] =  max(pick,notpick)
		    return dp[n]
		dp = [-1]*n
		return f(arr,n-1,dp)   
    
 approch 3 : using tabulation t.c. O(n) and O(1)
 

   
   

